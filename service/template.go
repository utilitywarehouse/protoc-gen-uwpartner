package service

const partnerServiceTpl = `
// Code generated by protoc-gen-uwpartner. DO NOT EDIT.
// source: {{ .Name }}

package {{ package . }}

import (
	"context"

	"github.com/utilitywarehouse/partner-pkg/service"
	"github.com/utilitywarehouse/partner-pkg/operational"
)

{{ range .Services }}

// ~~~~~~~~~~~~~~~~~~~~~~~
// ~~~ {{ .Name }}
// ~~~~~~~~~~~~~~~~~~~~~~~

// ~~~ {{ .Name }} Service

// {{ .Name }}Service wraps and standadises gRPC clients & servers for UW Partner engineering teams
type {{ .Name }}Service struct {
	svc *service.Service
}

// New{{ .Name }}Service sets up a new service with all the configuration needed
// for a default {{ .Name }} client & server.
//
// ctx will be passed to all servers & clients created from the service.
// opts alter default options which are passed to all servers & clients created.
func New{{ .Name }}Service(ctx context.Context, opts ...service.Option) *{{ .Name }}Service {
	operational.Register()

	opts = append([]service.Option{
		service.Ctx(ctx),

		{{ if option "namespace" }} service.Namespace("{{ option "namespace" }}"), {{ end }}

		{{ if option "name" }} service.Name("{{ option "name" }}"), {{ else }} service.Name("{{ .Name.LowerCamelCase }}"), {{ end }}

		{{ if option "endpoint" }} service.Endpoint("{{ option "endpoint" }}"), {{ end }}

		{{ if option "port" }} service.Port("{{ option "port" }}"), {{ end }}
	}, opts...)
	return &{{ .Name }}Service{
		svc: service.NewService(opts...),
	}
}

// ~~~ {{ .Name }} Client

// This is a compile-time assertion to ensure that the generated client
// implements the neccessery client service interface. A compilation error
// at this line means that something has gone wrong with protoc-gen-uwpartner.
var _ {{ .Name }}ServiceClient = (*{{ .Name.LowerCamelCase }}ServiceClient)(nil)

// {{ .Name }}ServiceClient is the client API for {{ .Name }} service.
type {{ .Name }}ServiceClient interface {
	{{ .Name }}Client
	Close() error
}

type {{ .Name.LowerCamelCase }}ServiceClient struct {
	*{{ .Name.LowerCamelCase }}Client
}

// Client creates a new {{ .Name }}Client with the gRPC connection already dialed
func (s *{{ .Name }}Service) Client(opts ...service.Option) ({{ .Name }}ServiceClient, error) {
	conn, err := s.svc.Client(opts...).Dial()
	if err != nil {
		return nil, err
	}

	return &{{ .Name.LowerCamelCase }}ServiceClient{&{{ .Name.LowerCamelCase }}Client{conn}}, nil
}

// Close closes the underlying GRPC connection
func (c *{{ .Name.LowerCamelCase }}ServiceClient) Close() error {
	return c.cc.Close()
}

// ~~~ {{ .Name }} Server

// Server creates a new grpc.Server with {{ .Name }}Server registered with it
func (s *{{ .Name }}Service) Server(srv {{ .Name }}Server, opts ...service.Option) *service.Server {
	server := s.svc.Server(opts...)
	server.Register(&_{{ .Name }}_serviceDesc, srv)

	return server
}

{{ end }}
`
